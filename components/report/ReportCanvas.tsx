
import React from 'react';
import { ReportTemplate, ReportInstance, BlockType, TitleBlockData, ImageBlockData, KpiBlockData, StatusBlockData, ChartBlockData, TextBlockData, ReportBlockData, ProjectProgressBlockData, ListBlockData } from '@/types';
import TitleBlock from '@/components/report/TitleBlock';
import ImageBlock from '@/components/report/ImageBlock';
import KpiBlock from '@/components/report/KpiBlock';
import StatusBlock from '@/components/report/StatusBlock';
import ChartBlock from '@/components/report/ChartBlock';
import TextBlock from '@/components/report/TextBlock';
import ProjectProgressBlock from '@/components/report/ProjectProgressBlock';
import ListBlock from '@/components/report/ListBlock';
import { cn } from '@/lib/utils';

interface ReportCanvasProps {
  template: ReportTemplate;
  reportData: ReportInstance;
}

const ReportCanvas: React.FC<ReportCanvasProps> = ({ template, reportData }) => {

  const renderBlock = (block: ReportBlockData) => {
    const data = reportData.data[block.id] || {};
    const finalBlock = { ...block, ...data };
    
    switch (finalBlock.type) {
      case BlockType.TITLE:
        return <TitleBlock {...(finalBlock as TitleBlockData)} />;
      case BlockType.IMAGE:
        return <ImageBlock {...(finalBlock as ImageBlockData)} />;
      case BlockType.KPI:
        return <KpiBlock {...(finalBlock as KpiBlockData)} />;
      case BlockType.STATUS:
        return <StatusBlock {...(finalBlock as StatusBlockData)} />;
      case BlockType.CHART:
        return <ChartBlock {...(finalBlock as ChartBlockData)} />;
      case BlockType.TEXT:
        return <TextBlock {...(finalBlock as TextBlockData)} />;
      case BlockType.PROJECT_PROGRESS:
        return <ProjectProgressBlock {...(finalBlock as ProjectProgressBlockData)} />;
      case BlockType.LIST:
        return <ListBlock {...(finalBlock as ListBlockData)} />;
      default:
        return <div className="p-4 border border-dashed border-red-500">Unsupported block type</div>;
    }
  };

  const getColSpanClass = (colSpan?: number) => {
    if (colSpan && colSpan > 0 && colSpan <= 12) {
      return `col-span-${colSpan}`;
    }
    return 'col-span-12'; // Default to full width
  };

  return (
    <div className="bg-background report-theme">
      {template.pages.map((page, pageIndex) => (
          <div key={page.id} className="p-10 max-w-5xl mx-auto my-4 bg-card shadow-lg report-page flex flex-col" style={{aspectRatio: '8.5 / 11'}}>
              <div className="grid grid-cols-12 gap-6 flex-grow">
                  {page.blocks.map(block => (
                      <div key={block.id} className={cn(getColSpanClass(block.layout?.colSpan))}>
                          {renderBlock(block)}
                      </div>
                  ))}
              </div>
              <footer className="text-center text-muted-foreground text-xs mt-4 pt-2 border-t border-border">
                  Page {pageIndex + 1}
              </footer>
          </div>
      ))}
       <div className="text-center text-muted-foreground text-sm mt-4 p-4">
            Report generated by QastView on {new Date().toLocaleDateString()} | {reportData.name} by {reportData.author}
        </div>
    </div>
  );
};

export default ReportCanvas;